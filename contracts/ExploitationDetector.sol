pragma solidity ^0.8.20;

contract ExploitationDetector {
    // Assuming a struct that represents a transaction
    struct Transaction {
        address from;
        address to;
        uint256 amount;
        uint256 timestamp;
    }

    // Example function to check for exploitation patterns
    function checkForExploitationPatterns(Transaction[] memory transactions) public pure returns (bool) {
        if(transactions.length == 0) {
            return false;
        }

        uint256 largeTransactionThreshold = 100 ether; // Example threshold
        uint256 timeFrame = 1 hours; // Time frame to consider for rapid withdrawals
        uint256 rapidWithdrawalThreshold = 3; // Number of withdrawals considered rapid

        uint256 lastTransactionTime = transactions[0].timestamp;
        uint256 rapidWithdrawals = 1;

        for(uint i = 0; i < transactions.length; i++) {
            // Check for large transactions
            if(transactions[i].amount > largeTransactionThreshold) {
                return true;
            }

            // Check for rapid successive withdrawals
            if(transactions[i].timestamp - lastTransactionTime <= timeFrame) {
                rapidWithdrawals++;
                if(rapidWithdrawals > rapidWithdrawalThreshold) {
                    return true;
                }
            } else {
                rapidWithdrawals = 1;
            }

            lastTransactionTime = transactions[i].timestamp;
        }

        return false;
    }
}
