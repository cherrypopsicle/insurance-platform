/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface PayoutInterface extends utils.Interface {
  functions: {
    "processClaim(uint32,address,uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "processClaim"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "processClaim",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "processClaim",
    data: BytesLike
  ): Result;

  events: {
    "ClaimProcessed(uint32,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimProcessed"): EventFragment;
}

export interface ClaimProcessedEventObject {
  policyId: number;
  policyHolder: string;
  amount: BigNumber;
  approved: boolean;
}
export type ClaimProcessedEvent = TypedEvent<
  [number, string, BigNumber, boolean],
  ClaimProcessedEventObject
>;

export type ClaimProcessedEventFilter = TypedEventFilter<ClaimProcessedEvent>;

export interface Payout extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PayoutInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    processClaim(
      _policyId: BigNumberish,
      _policyHolder: string,
      _claimAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  processClaim(
    _policyId: BigNumberish,
    _policyHolder: string,
    _claimAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    processClaim(
      _policyId: BigNumberish,
      _policyHolder: string,
      _claimAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimProcessed(uint32,address,uint256,bool)"(
      policyId?: BigNumberish | null,
      policyHolder?: string | null,
      amount?: null,
      approved?: null
    ): ClaimProcessedEventFilter;
    ClaimProcessed(
      policyId?: BigNumberish | null,
      policyHolder?: string | null,
      amount?: null,
      approved?: null
    ): ClaimProcessedEventFilter;
  };

  estimateGas: {
    processClaim(
      _policyId: BigNumberish,
      _policyHolder: string,
      _claimAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    processClaim(
      _policyId: BigNumberish,
      _policyHolder: string,
      _claimAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
