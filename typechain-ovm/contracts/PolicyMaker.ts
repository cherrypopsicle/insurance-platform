/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface PolicyMakerInterface extends utils.Interface {
  functions: {
    "calculateCoverageFactor()": FunctionFragment;
    "calculatePremium(uint32,address)": FunctionFragment;
    "calculateTotalCoverage(uint32,address)": FunctionFragment;
    "createPolicy(uint256,uint256,uint256,uint256,uint32,uint32,uint32)": FunctionFragment;
    "deactivatePolicy(uint32)": FunctionFragment;
    "handlePayout(uint32,address,uint256)": FunctionFragment;
    "isActive(uint32)": FunctionFragment;
    "isPolicyOwner(uint32,address)": FunctionFragment;
    "lastPremiumPaidTime(uint32,address)": FunctionFragment;
    "nextPolicyId()": FunctionFragment;
    "owner()": FunctionFragment;
    "payInitialPremium(uint32)": FunctionFragment;
    "payPremium(uint32)": FunctionFragment;
    "policies(uint32)": FunctionFragment;
    "policyOwners(uint32,address)": FunctionFragment;
    "premiumsPaid(uint32,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPayoutContract(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePolicy(uint32,uint256,uint256,uint32,uint32,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateCoverageFactor"
      | "calculatePremium"
      | "calculateTotalCoverage"
      | "createPolicy"
      | "deactivatePolicy"
      | "handlePayout"
      | "isActive"
      | "isPolicyOwner"
      | "lastPremiumPaidTime"
      | "nextPolicyId"
      | "owner"
      | "payInitialPremium"
      | "payPremium"
      | "policies"
      | "policyOwners"
      | "premiumsPaid"
      | "renounceOwnership"
      | "setPayoutContract"
      | "transferOwnership"
      | "updatePolicy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateCoverageFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePremium",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalCoverage",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivatePolicy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handlePayout",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPolicyOwner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPremiumPaidTime",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPolicyId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payInitialPremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payPremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policyOwners",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "premiumsPaid",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPayoutContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicy",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateCoverageFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalCoverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivatePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPolicyOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPremiumPaidTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextPolicyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payInitialPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payPremium", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "policyOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "premiumsPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPayoutContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicy",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PolicyCreated(uint32,uint256,uint256,uint32)": EventFragment;
    "PolicyDeactivated(uint32)": EventFragment;
    "PolicyUpdated(uint32,uint256,uint256,uint32)": EventFragment;
    "PremiumPaid(uint32,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumPaid"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PolicyCreatedEventObject {
  policyId: number;
  coverageAmount: BigNumber;
  initialPremiumFee: BigNumber;
  duration: number;
}
export type PolicyCreatedEvent = TypedEvent<
  [number, BigNumber, BigNumber, number],
  PolicyCreatedEventObject
>;

export type PolicyCreatedEventFilter = TypedEventFilter<PolicyCreatedEvent>;

export interface PolicyDeactivatedEventObject {
  policyId: number;
}
export type PolicyDeactivatedEvent = TypedEvent<
  [number],
  PolicyDeactivatedEventObject
>;

export type PolicyDeactivatedEventFilter =
  TypedEventFilter<PolicyDeactivatedEvent>;

export interface PolicyUpdatedEventObject {
  policyId: number;
  coverageAmount: BigNumber;
  initialPremiumFee: BigNumber;
  duration: number;
}
export type PolicyUpdatedEvent = TypedEvent<
  [number, BigNumber, BigNumber, number],
  PolicyUpdatedEventObject
>;

export type PolicyUpdatedEventFilter = TypedEventFilter<PolicyUpdatedEvent>;

export interface PremiumPaidEventObject {
  policyId: number;
  claimant: string;
  amount: BigNumber;
  isPremium: boolean;
}
export type PremiumPaidEvent = TypedEvent<
  [number, string, BigNumber, boolean],
  PremiumPaidEventObject
>;

export type PremiumPaidEventFilter = TypedEventFilter<PremiumPaidEvent>;

export interface PolicyMaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PolicyMakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateCoverageFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculatePremium(
      _policyId: BigNumberish,
      _policyHolder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTotalCoverage(
      _policyId: BigNumberish,
      _policyHolder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createPolicy(
      _coverageAmount: BigNumberish,
      _initialPremiumFee: BigNumberish,
      _initialCoveragePercentage: BigNumberish,
      _premiumRate: BigNumberish,
      _duration: BigNumberish,
      _penaltyRate: BigNumberish,
      _monthsGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deactivatePolicy(
      _policyId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    handlePayout(
      policyId: BigNumberish,
      policyHolder: string,
      payoutAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isActive(
      _policyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPolicyOwner(
      _policyId: BigNumberish,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastPremiumPaidTime(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nextPolicyId(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payInitialPremium(
      _policyId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    payPremium(
      _policyId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    policies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        number,
        number
      ] & {
        coverageAmount: BigNumber;
        initialPremiumFee: BigNumber;
        initialCoveragePercentage: BigNumber;
        premiumRate: BigNumber;
        duration: number;
        isActive: boolean;
        penaltyRate: number;
        monthsGracePeriod: number;
      }
    >;

    policyOwners(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    premiumsPaid(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPayoutContract(
      _payoutContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePolicy(
      _policyId: BigNumberish,
      _coverageAmount: BigNumberish,
      _initialPremiumFee: BigNumberish,
      _duration: BigNumberish,
      _monthsGracePeriod: BigNumberish,
      _penaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  calculateCoverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

  calculatePremium(
    _policyId: BigNumberish,
    _policyHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTotalCoverage(
    _policyId: BigNumberish,
    _policyHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createPolicy(
    _coverageAmount: BigNumberish,
    _initialPremiumFee: BigNumberish,
    _initialCoveragePercentage: BigNumberish,
    _premiumRate: BigNumberish,
    _duration: BigNumberish,
    _penaltyRate: BigNumberish,
    _monthsGracePeriod: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deactivatePolicy(
    _policyId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  handlePayout(
    policyId: BigNumberish,
    policyHolder: string,
    payoutAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isActive(
    _policyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPolicyOwner(
    _policyId: BigNumberish,
    _claimant: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastPremiumPaidTime(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nextPolicyId(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  payInitialPremium(
    _policyId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  payPremium(
    _policyId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  policies(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean,
      number,
      number
    ] & {
      coverageAmount: BigNumber;
      initialPremiumFee: BigNumber;
      initialCoveragePercentage: BigNumber;
      premiumRate: BigNumber;
      duration: number;
      isActive: boolean;
      penaltyRate: number;
      monthsGracePeriod: number;
    }
  >;

  policyOwners(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  premiumsPaid(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPayoutContract(
    _payoutContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePolicy(
    _policyId: BigNumberish,
    _coverageAmount: BigNumberish,
    _initialPremiumFee: BigNumberish,
    _duration: BigNumberish,
    _monthsGracePeriod: BigNumberish,
    _penaltyRate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateCoverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePremium(
      _policyId: BigNumberish,
      _policyHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalCoverage(
      _policyId: BigNumberish,
      _policyHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPolicy(
      _coverageAmount: BigNumberish,
      _initialPremiumFee: BigNumberish,
      _initialCoveragePercentage: BigNumberish,
      _premiumRate: BigNumberish,
      _duration: BigNumberish,
      _penaltyRate: BigNumberish,
      _monthsGracePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivatePolicy(
      _policyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    handlePayout(
      policyId: BigNumberish,
      policyHolder: string,
      payoutAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isActive(
      _policyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPolicyOwner(
      _policyId: BigNumberish,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastPremiumPaidTime(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextPolicyId(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    payInitialPremium(
      _policyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payPremium(
      _policyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    policies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        number,
        number
      ] & {
        coverageAmount: BigNumber;
        initialPremiumFee: BigNumber;
        initialCoveragePercentage: BigNumber;
        premiumRate: BigNumber;
        duration: number;
        isActive: boolean;
        penaltyRate: number;
        monthsGracePeriod: number;
      }
    >;

    policyOwners(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    premiumsPaid(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPayoutContract(
      _payoutContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePolicy(
      _policyId: BigNumberish,
      _coverageAmount: BigNumberish,
      _initialPremiumFee: BigNumberish,
      _duration: BigNumberish,
      _monthsGracePeriod: BigNumberish,
      _penaltyRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PolicyCreated(uint32,uint256,uint256,uint32)"(
      policyId?: null,
      coverageAmount?: null,
      initialPremiumFee?: null,
      duration?: null
    ): PolicyCreatedEventFilter;
    PolicyCreated(
      policyId?: null,
      coverageAmount?: null,
      initialPremiumFee?: null,
      duration?: null
    ): PolicyCreatedEventFilter;

    "PolicyDeactivated(uint32)"(policyId?: null): PolicyDeactivatedEventFilter;
    PolicyDeactivated(policyId?: null): PolicyDeactivatedEventFilter;

    "PolicyUpdated(uint32,uint256,uint256,uint32)"(
      policyId?: null,
      coverageAmount?: null,
      initialPremiumFee?: null,
      duration?: null
    ): PolicyUpdatedEventFilter;
    PolicyUpdated(
      policyId?: null,
      coverageAmount?: null,
      initialPremiumFee?: null,
      duration?: null
    ): PolicyUpdatedEventFilter;

    "PremiumPaid(uint32,address,uint256,bool)"(
      policyId?: BigNumberish | null,
      claimant?: string | null,
      amount?: null,
      isPremium?: null
    ): PremiumPaidEventFilter;
    PremiumPaid(
      policyId?: BigNumberish | null,
      claimant?: string | null,
      amount?: null,
      isPremium?: null
    ): PremiumPaidEventFilter;
  };

  estimateGas: {
    calculateCoverageFactor(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePremium(
      _policyId: BigNumberish,
      _policyHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTotalCoverage(
      _policyId: BigNumberish,
      _policyHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPolicy(
      _coverageAmount: BigNumberish,
      _initialPremiumFee: BigNumberish,
      _initialCoveragePercentage: BigNumberish,
      _premiumRate: BigNumberish,
      _duration: BigNumberish,
      _penaltyRate: BigNumberish,
      _monthsGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deactivatePolicy(
      _policyId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    handlePayout(
      policyId: BigNumberish,
      policyHolder: string,
      payoutAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isActive(
      _policyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPolicyOwner(
      _policyId: BigNumberish,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastPremiumPaidTime(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextPolicyId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payInitialPremium(
      _policyId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    payPremium(
      _policyId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    policies(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    policyOwners(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    premiumsPaid(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPayoutContract(
      _payoutContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePolicy(
      _policyId: BigNumberish,
      _coverageAmount: BigNumberish,
      _initialPremiumFee: BigNumberish,
      _duration: BigNumberish,
      _monthsGracePeriod: BigNumberish,
      _penaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateCoverageFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePremium(
      _policyId: BigNumberish,
      _policyHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTotalCoverage(
      _policyId: BigNumberish,
      _policyHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPolicy(
      _coverageAmount: BigNumberish,
      _initialPremiumFee: BigNumberish,
      _initialCoveragePercentage: BigNumberish,
      _premiumRate: BigNumberish,
      _duration: BigNumberish,
      _penaltyRate: BigNumberish,
      _monthsGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deactivatePolicy(
      _policyId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    handlePayout(
      policyId: BigNumberish,
      policyHolder: string,
      payoutAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isActive(
      _policyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPolicyOwner(
      _policyId: BigNumberish,
      _claimant: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPremiumPaidTime(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextPolicyId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payInitialPremium(
      _policyId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    payPremium(
      _policyId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    policies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    policyOwners(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    premiumsPaid(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPayoutContract(
      _payoutContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePolicy(
      _policyId: BigNumberish,
      _coverageAmount: BigNumberish,
      _initialPremiumFee: BigNumberish,
      _duration: BigNumberish,
      _monthsGracePeriod: BigNumberish,
      _penaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
